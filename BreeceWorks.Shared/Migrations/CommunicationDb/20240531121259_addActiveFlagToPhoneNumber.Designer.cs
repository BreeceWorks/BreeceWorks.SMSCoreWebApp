// <auto-generated />
using System;
using BreeceWorks.Shared.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BreeceWorks.Shared.Migrations.CommunicationDb
{
    [DbContext(typeof(CommunicationDbContext))]
    [Migration("20240531121259_addActiveFlagToPhoneNumber")]
    partial class addActiveFlagToPhoneNumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BreeceWorks.Shared.Entities.CaseDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseType")
                        .HasColumnType("int");

                    b.Property<string>("ClaimNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateOfLoss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Deductible")
                        .HasColumnType("int");

                    b.Property<int?>("LanguagePreference")
                        .HasColumnType("int");

                    b.Property<Guid?>("LineOfBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrimaryContact")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Privacy")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LineOfBusinessId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.CompanyPhoneNumberDto", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SMSProcessor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneNumber");

                    b.ToTable("CompanyPhoneNumbers");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.CustomerDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("OptStatus")
                        .HasColumnType("bit");

                    b.Property<string>("OptStatusDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email", "Mobile")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.LineOfBusinessDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("lineOfBusinesses");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.MessageAttachmentDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("MessageAttachments");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.MessageAuthorDto", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("MessageAuthors");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.MessageDto", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CaseDtoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("authorid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("channelSource")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("formatting")
                        .HasColumnType("int");

                    b.Property<int?>("messageTemplateTemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("needsAction")
                        .HasColumnType("bit");

                    b.Property<bool>("needsAttention")
                        .HasColumnType("bit");

                    b.Property<string>("sMSId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CaseDtoId");

                    b.HasIndex("authorid");

                    b.HasIndex("messageTemplateTemplateId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.MessageTemplateDto", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemplateId");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.OperatorDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.OperatorRoleDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperatorRoles");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.TemplateValueDto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MessageTemplateDtoTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MessageTemplateDtoTemplateId");

                    b.ToTable("MessageTemplateValues");
                });

            modelBuilder.Entity("CaseDtoOperatorDto", b =>
                {
                    b.Property<Guid>("CasesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondaryOperatorsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CasesId", "SecondaryOperatorsId");

                    b.HasIndex("SecondaryOperatorsId");

                    b.ToTable("CaseDtoOperatorDto");
                });

            modelBuilder.Entity("MessageAttachmentDtoMessageDto", b =>
                {
                    b.Property<string>("Messagesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("messageAttachmentsid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Messagesid", "messageAttachmentsid");

                    b.HasIndex("messageAttachmentsid");

                    b.ToTable("MessageAttachmentDtoMessageDto");
                });

            modelBuilder.Entity("OperatorDtoOperatorRoleDto", b =>
                {
                    b.Property<Guid>("OperatorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperatorsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("OperatorDtoOperatorRoleDto");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.CaseDto", b =>
                {
                    b.HasOne("BreeceWorks.Shared.Entities.CustomerDto", "Customer")
                        .WithMany("Cases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreeceWorks.Shared.Entities.LineOfBusinessDto", "LineOfBusiness")
                        .WithMany("Cases")
                        .HasForeignKey("LineOfBusinessId");

                    b.Navigation("Customer");

                    b.Navigation("LineOfBusiness");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.MessageDto", b =>
                {
                    b.HasOne("BreeceWorks.Shared.Entities.CaseDto", null)
                        .WithMany("Messages")
                        .HasForeignKey("CaseDtoId");

                    b.HasOne("BreeceWorks.Shared.Entities.MessageAuthorDto", "author")
                        .WithMany()
                        .HasForeignKey("authorid");

                    b.HasOne("BreeceWorks.Shared.Entities.MessageTemplateDto", "messageTemplate")
                        .WithMany("Messages")
                        .HasForeignKey("messageTemplateTemplateId");

                    b.Navigation("author");

                    b.Navigation("messageTemplate");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.TemplateValueDto", b =>
                {
                    b.HasOne("BreeceWorks.Shared.Entities.MessageTemplateDto", null)
                        .WithMany("TemplateValues")
                        .HasForeignKey("MessageTemplateDtoTemplateId");
                });

            modelBuilder.Entity("CaseDtoOperatorDto", b =>
                {
                    b.HasOne("BreeceWorks.Shared.Entities.CaseDto", null)
                        .WithMany()
                        .HasForeignKey("CasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreeceWorks.Shared.Entities.OperatorDto", null)
                        .WithMany()
                        .HasForeignKey("SecondaryOperatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageAttachmentDtoMessageDto", b =>
                {
                    b.HasOne("BreeceWorks.Shared.Entities.MessageDto", null)
                        .WithMany()
                        .HasForeignKey("Messagesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreeceWorks.Shared.Entities.MessageAttachmentDto", null)
                        .WithMany()
                        .HasForeignKey("messageAttachmentsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OperatorDtoOperatorRoleDto", b =>
                {
                    b.HasOne("BreeceWorks.Shared.Entities.OperatorDto", null)
                        .WithMany()
                        .HasForeignKey("OperatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BreeceWorks.Shared.Entities.OperatorRoleDto", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.CaseDto", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.CustomerDto", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.LineOfBusinessDto", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("BreeceWorks.Shared.Entities.MessageTemplateDto", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TemplateValues");
                });
#pragma warning restore 612, 618
        }
    }
}
